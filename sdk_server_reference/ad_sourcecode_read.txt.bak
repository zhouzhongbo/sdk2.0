请求 server时，server会确认是否通过该请求，如果通过，会替换合适的值；这两项可能会用于防作弊系统

 /**
     * Appends special keys/values for advertising id and do-not-track. PlayServicesUrlRewriter will
     * replace these templates with the correct values when the request is processed.
     */
    protected void appendAdvertisingInfoTemplates() {
        addParam("udid", PlayServicesUrlRewriter.UDID_TEMPLATE);
        addParam("dnt", PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
    }




关于视频：
1.因为是聚合平台，自身不分发广告，故可以去掉视频广告请求展现流程。
  广告聚合平台参考mopub自身说明，可以知道支持的广告类型为基本类型
  admob,facebook,inmobi ——>三种基本类型

Network			Network SDK	Network Compatible Version	Supported Ad Formats
Millennial Media	iOS,  		Android	6.0			iOS: Banner, Interstitial
									Android: Banner, Interstitial, Native (Android-only)

AdMob [Google]		iOS, Android	iOS: 7.1.0, 
					Android: 7.8.0			Banner, Interstitial

Facebook Audience	iOS, Android	iOS/Android: 4.10.1		Banner, Interstitial, Native

AdColony		iOS, Android	iOS: 2.4.12, Android,		
					Rewarded Video: 2.3.5		Interstitial, Rewarded Video

Chartboost		iOS, Android	iOS 6.4.0, Android 6.4.1	Interstitial, Rewarded Video


Conversant		iOS, Android	iOS: 4.4.0, Android: 2.4.0	Banner, Interstitial

Tapjoy			iOS, Android	iOS/Android: 11.3.0	Interstitial, Rewarded Video

Yahoo! Gemini		iOS, Android		For instructions, visit Yahoo!’s doc page.

Unity Ads*		iOS, Android	iOS: 1.5.6 Android: 1.4.7	Rewarded Video

Vungle			iOS, Android	iOS: 3.2.0, Android: 3.3.0	Interstitial, Rewarded Video


关于广告的显示控制：
1.建议控制不要放在SDK，SDK只用来做广告的请求，展示，——>控制流程放在server也便于后续的逻辑更新，不必频繁的更新SDK -jar，特别是目前的SDK是不支持做自更新的情况！

2.通过回环控制，目前是sdk2.0 的V1版本，通过获取配置表来获取访问不同版本的接口。



banner:
1.广告位大小参数从哪里传递？adwith,adheight—>本地对广告位大小做了相关的校验，不符合大小的，将提示无法适配的错误
2.google-loadad —-是否需要设置代理？（setRequestAgent("MoPub")）
3.create流程：
  mopub.banner—>loadcustomadapter—>create customeventbanner—>具体的实现类（实现了各个平台对聚合平台的扩展）—>创建的广告通过listener回传给adapter，由adapter添加到mopub的根试图中。

  看到mopub自己平台和聚合平台的pk关系为：
	1.从平台选取一个network 配置，请求；
	2.请求成功即可展现，请求失败，重新访问请求URL，并附上上次请求状态（fail= 1）
	3.重复以上步骤，直至成功获取到广告
	4.network都取不到，从自己平台获取（html-banner）



	SDK			server（Droi）								3rd-DSP（N）
	------------------------>请求广告配置（带上用户基础数据）
	<-----------------------返回当前广告位的映射配置，供本地做广告请求(按epcm排序给)；
	-------------------------------------------------------------------------------------------------->用获取的配置信息（appid，slotid）请求广告
	<--------------------------------------------------------------------------------------------------请求成功；展示
      a:------------------------->请求失败，再次向server获取广告配置(按epcm排序，请求时带上上次请求的平台信息或次序)
      b:<-------------------------返回第三方广告平台配置信息，供本地做广告请求
	--------------------------------------------------------------------------------------------------->请求成功：展示，请求失败重复a,b动作；


interstitial
	mopub自己平台的内容同样是通过html来加载
	interstitial 流程通过重写mopubview(banner)相关接口实现广告请求
	ps:interstitial 的展现方式不一定通过docerview添加view，也可以通过activity实现
	















设计优点：
1.关于webview中如果处理img 背景问题：
他们通过在文件中写bitmap的byte值，在设置为enmu值。这样避免了需要单独存储img文件的问题。

2.关于动态添加button后续的处理；
直接通过返回对象来判断，而不是设置ID，因为ID有冲突的风险！

3.广告浏览页 控制栏在底部，close独立化
 UI虽然丑了点，但是胜在稳定

4.增加了接入广告activity的生命周期监听，用于做多种数据验证！

5.关于重定向，是否有需要用到？

6.关于IOS & web 是否需要支持？ ios同样有开源代码，web还不确认！

7.平台采集了很多数据，自建平台是否继续支持？
    1.之前提到的替换的ID
    2.performanceDurationMs
    3.requestID

8.为了适应mopub平台，数据采集的方式可能需要修改，不应该在用字段json上传的方式去做

9.关于http请求
    mopub中自行封装了一个请求的jar(mopub-volley),所有的和server相关的交互都在这里处理。
    这里设计了一个类似线程池类似的请求队列（RequesetQueue）,通过cacheDispatcher 和 networkdispatcher来
    管理队列中请求事件，通过responseDelivery来分发处理好的请求结果。
    实际在处理请求是Network 这个类实现（mNetwork.performRequest）；
    
10.UrlRewriter.rewriteUrl()
   用来替换请求url中 以下参数：
    	udid=""    (广告特殊key/values)
	dnt=""
   针对google-ad-service:将会是以下的值：
	udid=mp_tmpl_advertising_id&dnt=mp_tmpl_do_not_track	

